UDP Broadcast message on 7890 to show card is alive. Has NCP_BOOT_SEQUENCE and S/N.
	Format: 0x4040 BOOT_SEQ=0x********(uint32) S/N=13 bytes(ASCII) Empty=43-0x00 0x0403

Open port to TCP 1027 and receive info about card.
Received metadata:
	Null terminated strings. One string per packet for mine but have seen the entire list in one packet before too...?
Tranmit two packets, one with with NCP_BOOT_SEQUENCE retransmitted.
	First: 0x80 + 4 NCP_BOOT_SEQUENCE bytes
		Returns 0x00
	Second: 0x01 0x00 0x00 0x00 0x65
		Returns 0x00
Close TCP 1027.

TFTP over files:
	_pciepa.vxw
	_fpgaconfig
	_pciepa
	helena1.exo
	helena2.exo
	aevt.mcs

Open TCP 1027, receive again, push two packets, one with scroll message, the other with known msg "Z_pciepa".
	First: Scroll msg starts with a space 0x20 and ends with a null term 0x00.
		No immediate return/ack.
	Second: 0x00 0x00 "Z_pciepa" 0x00
		No immediate return/ack.
	Card then sends a series of 16 single bytes (each of these are their own packet):
		0x00 0x01 0x04 0x05 0x00 0x01 0x04 0x00 0xff 0xff 0x00 0x00 0xff 0xff 0x00 0x00
		This seems the same each time across different cards...

Open TCP 1029:
	MSGs sent to/from card with first 12 bytes in packet Addr: 0x800000xx Token: 0x800000xx Unk1=0x000000xx Everything after Data?
	MSGs should always(?) have a response message come back with the same token but may have a different address.
	MSGs from card as a broadcast about general info come with a token all zeros (0x00000000).
	
	General status transmition from card every second from 0x80000088 0x00000000 0x00000000
		Probably something to do with traffic and link status for real time graph)
	
	***Does each Addr=0x800000?? have a deterministic response and send size? If so we need to figure them all out.
		High priority***
	General empty return ACK to sent msg comes in the form of Addr=0x80000008 Token=0x800000xx Unk1=0x00000000
	
	OLD WRONG??:
	Sent msgs with 0x800000??800000** Respond with 0x800000??800000** where the ** are the same
		If msg from card back is longer than one packet it will respond with 0x800000??00000000 for every packet until last which will then follow the above rule.
		EX: 0x800000??80000049